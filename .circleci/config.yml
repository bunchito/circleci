version: 2.1

orbs:
  slack: circleci/slack@3.4.2
  jq: circleci/jq@2.2.0

executors:
  custom-executor:
    docker:
      - image: circleci/node:lts-browsers
  node-with-postgres:
    parameters:
      node-version:
        type: string
        default: lts
      postgres-version:
        type: string
        default: '13.2'
    docker:
      - image: circleci/node:<<parameters.node-version>>
      - image: postgres:<<parameters.postgres-version>>
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          PGPORT: 2345

parameters:
  project_name:
    type: string
    default: bandera
  aws_region:
    type: string
    default: us-east-1

jobs:
  # build:
  #   executor: custom-executor
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - restore_cache:
  #         key: dependency-cache-{{ checksum "core/package-lock.json" }}
  #     - run:
  #         name: Installing local dependencies
  #         command: |
  #           cd core
  #           npm install
  #           cd ../tests
  #           npm install
  #           cd ../database
  #           npm install
  #     - save_cache:
  #         key: dependency-cache-{{ checksum "core/package-lock.json" }}
  #         paths:
  #           - core/node_modules
  #     - persist_to_workspace:
  #         root: /home/circleci/project
  #         paths:
  #           - core
  #           - tests
  #           - database
  #     - slack/status:
  #         fail_only: true

  # tests:
  #   executor: node-with-postgres
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - attach_workspace:
  #         at: /home/circleci/project
  #     - run:
  #         name: Migrations test
  #         command: |
  #           cd database
  #           npm run db:migrate
  #     - run:
  #         name: Core tests
  #         command: |
  #           cd core/
  #           npm test
  #     - run:
  #         name: Integration API tests
  #         command: |
  #           cd core/
  #           npm run build
  #           cd ../tests/
  #           ls -a
  #           npm test
  #     - slack/status:
  #         fail_only: true

  # check-docker-image:
  #   executor: custom-executor
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - attach_workspace:
  #         at: /home/circleci/project
  #     - run:
  #         name: Build docker image with NO cache
  #         command: |
  #           cd core
  #           docker build --no-cache -t << pipeline.parameters.project_name >>:latest .
  #     - slack/status:
  #         fail_only: true

  # lint:
  #   executor: custom-executor
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: /home/circleci/project
  #     - run:
  #         name: Lint
  #         command: |
  #           cd core
  #           npm install
  #           npm run lint
  #     - slack/status:
  #         fail_only: true

  # check-docker-db-image:
  #   executor: custom-executor
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - attach_workspace:
  #         at: /home/circleci/project
  #     - run:
  #         name: Build docker database image with NO cache
  #         command: |
  #           cd database
  #           docker build --no-cache -t << pipeline.parameters.project_name >>-db:latest .
  #     - slack/status:
  #         fail_only: true

  deploy-qa:
    executor: custom-executor
    docker:
      - image: cimg/python:3.7-node
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /home/circleci/project
      - jq/install
      - run: 
          name: ls
          command: ls
      - run: 
          name: Read version and set it as env variable
          command: |
            echo 'export IMG_TAG=$(jq .project.version version.json)' >> $BASH_ENV
            source $BASH_ENV
      - run: 
          name: Get version from env variables
          command: echo $IMG_TAG
      # - run:
      #     name: Build docker image with NO cache
      #     command: |
      #       cd core
      #       docker build --no-cache -t << pipeline.parameters.project_name >>:latest .
      # - run:
      #     name: Tag the docker image
      #     command: docker tag << pipeline.parameters.project_name >>:latest $AWS_ACCOUNT.dkr.ecr.<< pipeline.parameters.aws_region >>.amazonaws.com/<< pipeline.parameters.project_name >>:latest
      # - run:
      #     name: Install AWS cli
      #     command: |
      #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       unzip awscliv2.zip
      #       sudo ./aws/install
      #       aws --version
      # - run:
      #     name: Push image to ECR
      #     command: |
      #       aws --version
      #       aws ecr get-login-password --region << pipeline.parameters.aws_region >> | docker login --username AWS --password-stdin $AWS_ACCOUNT.dkr.ecr.<< pipeline.parameters.aws_region >>.amazonaws.com
      #       docker push $AWS_ACCOUNT.dkr.ecr.<< pipeline.parameters.aws_region >>.amazonaws.com/<< pipeline.parameters.project_name >>:latest
      # - run: sleep 25
      # - run:
      #     name: Tasks
      #     command: aws ecs update-service --cluster qa-<< pipeline.parameters.project_name >> --service qa-<< pipeline.parameters.project_name >> --task-definition qa-<< pipeline.parameters.project_name >> --force-new-deployment --desired-count 2 --region << pipeline.parameters.aws_region >>
      # - slack/status:
      #     fail_only: true

workflows:
  version: 2
  build_test_deploy:
    jobs:
      # - build
      # - lint:
      #     requires:
      #       - build
      # - tests:
      #     requires:
      #       - build
      # - check-docker-image:
      #     requires:
      #       - build
      # - check-docker-db-image:
      #     requires:
      #       - build
      - deploy-qa:
          # requires:
          #   - lint
          #   - tests
          #   - check-docker-image
          filters:
            branches:
              only: master